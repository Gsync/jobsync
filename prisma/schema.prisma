// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Step: 1 run `npx prisma generate` 
// Step: 2 run `npx prisma migrate dev` after update, make sure code is updated afterwards

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  password    String
  createdAt   DateTime   @default(now())
  jobsApplied Job[]
  JobTitle    JobTitle[]
  Location    Location[]
  Company     Company[]
  Contact     Contact[]
  Profile     Profile[]
}

model Profile {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  resumes Resume[]
}

model Resume {
  id             String          @id @default(uuid())
  profileId      String
  title          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ContactInfo    ContactInfo?
  ResumeSections ResumeSection[]
  profile        Profile         @relation(fields: [profileId], references: [id])
}

model ResumeSection {
  id                      String                   @id @default(uuid())
  resumeId                String
  sectionTitle            String
  sectionType             String
  summaryId               String?                  @unique
  summary                 Summary?                 @relation(fields: [summaryId], references: [id])
  workExperiences         WorkExperience[]
  educations              Education[]
  licenseOrCertifications LicenseOrCertification[]
  others                  OtherSection[]
  Resume                  Resume                   @relation(fields: [resumeId], references: [id])
}

model ContactInfo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resumeId  String   @unique
  firstName String
  lastName  String
  headline  String
  email     String
  phone     String
  address   String?
  resume    Resume   @relation(fields: [resumeId], references: [id])
}

model Summary {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  content       String
  ResumeSection ResumeSection? @relation
}

model WorkExperience {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  companyId       String
  Company         Company        @relation(fields: [companyId], references: [id])
  jobTitleId      String
  jobTitle        JobTitle       @relation(fields: [jobTitleId], references: [id])
  startDate       DateTime
  endDate         DateTime?
  description     String
  locationId      String
  location        Location       @relation(fields: [locationId], references: [id])
  resumeSectionId String?
  ResumeSection   ResumeSection? @relation(fields: [resumeSectionId], references: [id])
}

model Education {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  institution     String
  degree          String
  fieldOfStudy    String
  startDate       DateTime
  endDate         DateTime?
  description     String?
  locationId      String
  location        Location       @relation(fields: [locationId], references: [id])
  resumeSectionId String?
  ResumeSection   ResumeSection? @relation(fields: [resumeSectionId], references: [id])
}

model LicenseOrCertification {
  id              String         @id @default(uuid())
  title           String
  organization    String
  issueDate       DateTime?
  expirationDate  DateTime?
  credentialUrl   String?
  ResumeSection   ResumeSection? @relation(fields: [resumeSectionId], references: [id])
  resumeSectionId String?
}

model OtherSection {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  title           String
  content         String
  ResumeSection   ResumeSection? @relation(fields: [resumeSectionId], references: [id])
  resumeSectionId String?
}

model Contact {
  id          String     @id @default(uuid())
  name        String
  email       String
  createdAt   DateTime
  createdBy   String // userId
  user        User       @relation(fields: [createdBy], references: [id])
  Interview   Interview? @relation(fields: [interviewId], references: [id])
  interviewId String?
}

model JobTitle {
  id              String           @id @default(uuid())
  label           String
  value           String           @unique //TODO: Change and Apply unique constraint on index  with value and userid
  jobs            Job[]
  createdBy       String // userId
  user            User             @relation(fields: [createdBy], references: [id])
  workExperiences WorkExperience[]
}

model JobStatus {
  id    String @id @default(uuid())
  label String
  value String @unique
  jobs  Job[]
}

model Location {
  id             String           @id @default(uuid())
  label          String
  value          String
  stateProv      String?
  country        String?
  jobsApplied    Job[]
  createdBy      String // userId
  user           User             @relation(fields: [createdBy], references: [id])
  educations     Education[]
  workExperience WorkExperience[]
}

model Company {
  id              String           @id @default(uuid())
  label           String
  value           String           @unique
  jobsApplied     Job[]
  logoUrl         String? // field is optional
  createdBy       String // userId
  user            User             @relation(fields: [createdBy], references: [id])
  workExperiences WorkExperience[]
}

model JobSource {
  id          String @id @default(uuid())
  label       String
  value       String @unique
  jobsApplied Job[]
}

model Interview {
  id           String    @id @default(uuid())
  createdAt    DateTime
  jobId        String
  job          Job?      @relation(fields: [jobId], references: [id])
  interviewers Contact[]
}

model Job {
  id          String      @id @default(uuid())
  userId      String
  User        User        @relation(fields: [userId], references: [id])
  jobUrl      String?
  description String
  jobType     String
  createdAt   DateTime
  applied     Boolean     @default(false)
  appliedDate DateTime?
  dueDate     DateTime?
  statusId    String
  Status      JobStatus   @relation(fields: [statusId], references: [id])
  JobTitle    JobTitle    @relation(fields: [jobTitleId], references: [id])
  jobTitleId  String
  Company     Company     @relation(fields: [companyId], references: [id])
  companyId   String
  JobSource   JobSource?  @relation(fields: [jobSourceId], references: [id])
  jobSourceId String?
  salaryRange String?
  Location    Location?   @relation(fields: [locationId], references: [id])
  locationId  String?
  Interview   Interview[]
}
